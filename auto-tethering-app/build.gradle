apply plugin: 'com.android.application'
//apply plugin: 'jacoco'
//apply plugin: 'com.github.kt3k.coveralls'

/*jacoco {
    toolVersion = "0.7.5.201505241946"
}*/

buildscript {
    repositories {
        mavenCentral()
        jcenter()
    }

    dependencies {
        classpath 'org.kt3k.gradle.plugin:coveralls-gradle-plugin:2.4.0'
    }
}

android {
    signingConfigs {
        release
    }

    lintOptions {
        abortOnError false
    }

    buildTypes {
        release {
            minifyEnabled true
            zipAlignEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
        debug {
            debuggable true
        }
        coverage {
            debuggable true
            testCoverageEnabled = true
        }
    }

    compileSdkVersion 21
    buildToolsVersion '21.1.2'
    defaultConfig {
        applicationId "com.labs.dm.auto_tethering"
        minSdkVersion 10
        maxSdkVersion 22
        targetSdkVersion 21
        versionCode 41
        versionName "0.0.41"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        buildConfigField "java.util.Date", "buildTime", "new java.util.Date(" + getDateAsMillis() + "L)"
        buildConfigField "String", "OPENCELLID_KEY", getMyApiKey("OPEN_CELL_ID_API_KEY")
    }

    testOptions {
        unitTests.returnDefaultValues = true
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
    }
}

def coverageSourceDirs = [
        '../app/src/main/java'
]

static def getDateAsMillis() {
    def Calendar cal = Calendar.getInstance();
    return cal.getTimeInMillis().toString()
}

//task jacocoTestReport(type: JacocoReport, dependsOn: "test") {
//    group = "Reporting"
//
//    description = "Generate Jacoco coverage reports"
//
//    classDirectories = fileTree(
//            dir: '../app/build/intermediates/classes/debug',
//            excludes: ['**//*R.class',
//                       '**//*R$*.class',
//                       '***/*//*$ViewInjector*.*',
//                       '**//*BuildConfig.*',
//                       '**//*Manifest*.*']
//    )
//
//    additionalSourceDirs = files(coverageSourceDirs)
//    sourceDirectories = files(coverageSourceDirs)
//    executionData = files('../app/build/jacoco/testDebugUnitTest.exec')
//
//    reports {
//        xml.enabled = true
//        html.enabled = true
//        //xml.destination = "../app/build/reports/jacoco/jacocoTestReport/jacocoTestReport.xml"
//    }
//
//}

//coveralls {
//    jacocoReportPath = "${buildDir}/reports/jacoco/jacocoTestReport/jacocoTestReport.xml"
//}

/*tasks.coveralls {
  group = 'Coverage reports'
  description = 'Uploads the aggregated coverage report to Coveralls'

  dependsOn jacocoTestReport
  onlyIf { System.env.'CI' }
}*/

dependencies {
    //compile -->
    compile fileTree(include: ['*.jar'], dir: 'libs')
    //compile 'com.android.support:appcompat-v7:21.0.+'
    //compile 'com.android.support:support-annotations:21.0.+'
    //testCompile -->
    testCompile 'junit:junit:4.12'
    testCompile 'org.mockito:mockito-core:1.10.19'
    testCompile 'org.hamcrest:hamcrest-library:1.1'
    //testCompile 'com.android.support:appcompat-v7:21.0.+'
    //testCompile 'com.android.support:support-annotations:21.0.+'
    //androidTestCompile -->
    androidTestCompile 'junit:junit:4.12'
    /* androidTestCompile 'com.android.support.test:runner:0.4'
     androidTestCompile 'com.android.support.test:rules:0.4'
     androidTestCompile 'com.android.support.test.espresso:espresso-core:2.2.1'
   */ androidTestCompile 'org.mockito:mockito-core:1.10.19'
    androidTestCompile 'org.hamcrest:hamcrest-library:1.1'
    //androidTestCompile 'com.android.support:appcompat-v7:21.0.+'
    //androidTestCompile 'com.android.support:support-annotations:21.0.+'
}

def Properties props = new Properties()
def propFile = new File(System.properties['user.home'] + '/.gradle/gradle.properties')

if (propFile.canRead()) {
    props.load(new FileInputStream(propFile))

    if (props != null && props.containsKey('RELEASE_STORE_FILE') && props.containsKey('RELEASE_STORE_PASSWORD') &&
            props.containsKey('RELEASE_KEY_ALIAS') && props.containsKey('RELEASE_KEY_PASSWORD')) {
        println 'gradle.properties found at:  ' + propFile
        android.signingConfigs.release.storeFile = file(System.properties['user.home'] + '/.gradle/' + props['RELEASE_STORE_FILE'])
        android.signingConfigs.release.storePassword = props['RELEASE_STORE_PASSWORD']
        android.signingConfigs.release.keyAlias = props['RELEASE_KEY_ALIAS']
        android.signingConfigs.release.keyPassword = props['RELEASE_KEY_PASSWORD']
    } else {
        println 'gradle.properties found but some entries are missing'
        android.buildTypes.release.signingConfig = null
    }
} else {
    println 'gradle.properties not found'
    android.buildTypes.release.signingConfig = null
}

def getMyApiKey(String property) {
    Properties properties = new Properties()
    properties.load(new FileInputStream("$project.rootDir/api.key"))
    return "\"" + properties.getProperty(property) + "\""
}

ext {
    ANDROID_BUILD_MIN_SDK_VERSION = 10
    ANDROID_BUILD_TARGET_SDK_VERSION = 22
    ANDROID_BUILD_TOOLS_VERSION = '22.0.1'
    ANDROID_BUILD_SDK_VERSION = 22
    SUPPORT_VERSION = '22.2.1'
    MAVEN_VERSION = '1.1.3'
}
