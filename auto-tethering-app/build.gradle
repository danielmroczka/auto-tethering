apply plugin: 'com.android.application'
apply plugin: 'io.fabric'

def VERSION_CODE = 72
def BUILD_TOOL_VERSION = '28.0.3'

repositories {
    maven { url 'https://maven.fabric.io/public' }
    maven { url 'https://maven.google.com' }
}

apply plugin: 'jacoco-android'

buildscript {
    repositories {
        mavenCentral()
        jcenter()
        maven { url 'https://maven.fabric.io/public' }
        maven { url 'https://maven.google.com' }
    }

    dependencies {
        classpath 'org.kt3k.gradle.plugin:coveralls-gradle-plugin:2.8.2'
        classpath 'com.dicedmelon.gradle:jacoco-android:0.1.2'
        classpath 'io.fabric.tools:gradle:1.+'
    }
}

android {
    signingConfigs {
        release
    }

    lintOptions {
        abortOnError false
    }

    buildTypes {
        release {
            minifyEnabled false
            zipAlignEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
            buildConfigField "String", "GOOGLE_API_KEY", getMyApiKey("GOOGLE_API_KEY_RELEASE")
        }
        debug {
            debuggable true
            buildConfigField "String", "GOOGLE_API_KEY", getMyApiKey("GOOGLE_API_KEY_DEBUG")
            ext.enableCrashlytics = true
        }
        coverage {
            debuggable true
            testCoverageEnabled = true
            buildConfigField "String", "GOOGLE_API_KEY", getMyApiKey("GOOGLE_API_KEY_DEBUG")
        }
    }

    compileSdkVersion 26
    buildToolsVersion '28.0.3'

    defaultConfig {
        applicationId "com.labs.dm.auto_tethering"
        minSdkVersion 14
        maxSdkVersion 26 // Android 8.0
        targetSdkVersion 26
        versionCode VERSION_CODE
        versionName "0.0." + VERSION_CODE
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        buildConfigField "java.util.Date", "buildTime", "new java.util.Date(" + getDateAsMillis() + "L)"
        buildConfigField "String", "GOOGLE_API_KEY", getMyApiKey("GOOGLE_API_KEY")
    }

    testOptions {
        unitTests.returnDefaultValues = true
    }

    useLibrary 'org.apache.http.legacy'
}

dependencies {
    //testCompile -->
    //androidTestCompile -->
    //androidTestCompile 'com.android.support.test:runner:0.5'
    //androidTestCompile 'com.android.support.test:rules:0.5'
    //androidTestCompile 'com.android.support.test.espresso:espresso-core:2.2.2'

    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation 'com.android.support:design:26.1.0'
    implementation 'com.android.support:support-v4:26.1.0'
    implementation 'com.android.support:cardview-v7:26.1.0'
    implementation 'com.android.support.constraint:constraint-layout:1.1.3'
    implementation 'com.linkedin.dexmaker:dexmaker-mockito:2.19.0'
    implementation 'de.cketti.library.changelog:ckchangelog:1.2.2@aar'
    implementation ('com.crashlytics.sdk.android:crashlytics:2.9.3@aar') {
        transitive = true
    }

    testImplementation 'junit:junit:4.12'
    testImplementation 'org.mockito:mockito-core:2.22.0'
    testImplementation 'org.hamcrest:hamcrest-library:1.3'
    testImplementation 'org.robolectric:robolectric:3.8'

    androidTestImplementation 'org.mockito:mockito-core:2.22.0'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
}

Properties props = new Properties()
def propFile = new File(System.properties['user.home'] + '/.gradle/gradle.properties')

if (propFile.canRead()) {
    props.load(new FileInputStream(propFile))

    if (props && props.containsKey('RELEASE_STORE_FILE') && props.containsKey('RELEASE_STORE_PASSWORD') &&
            props.containsKey('RELEASE_KEY_ALIAS') && props.containsKey('RELEASE_KEY_PASSWORD')) {
        println 'gradle.properties found at:  ' + propFile
        android.signingConfigs.release.with {
            storeFile = file(System.properties['user.home'] + '/.gradle/' + props['RELEASE_STORE_FILE'])
            storePassword = props['RELEASE_STORE_PASSWORD']
            keyAlias = props['RELEASE_KEY_ALIAS']
            keyPassword = props['RELEASE_KEY_PASSWORD']
        }
    } else {
        println 'gradle.properties found but some entries are missing'
        android.buildTypes.release.signingConfig = null
    }
} else {
    println 'gradle.properties not found'
    android.buildTypes.release.signingConfig = null
}

def getMyApiKey(String property) {
    def keyFile = new File("$project.rootDir/api.key")
    if (keyFile.canRead()) {
        Properties properties = new Properties()
        properties.load(new FileInputStream(keyFile))
        return "\"" + properties.getProperty(property) + "\""
    } else {
        println 'the file: api.key not found'
        return "\"\""
    }
}

static getDateAsMillis() {
    Calendar cal = Calendar.getInstance()
    return cal.getTimeInMillis().toString()
}

ext {
    ANDROID_BUILD_MIN_SDK_VERSION = 9
    ANDROID_BUILD_TARGET_SDK_VERSION = 26
    ANDROID_BUILD_TOOLS_VERSION = BUILD_TOOL_VERSION
    ANDROID_BUILD_SDK_VERSION = 26
    SUPPORT_VERSION = '28.0.3'
    MAVEN_VERSION = '1.1.3'
}
